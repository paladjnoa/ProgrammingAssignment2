inv <- solve(mat,...)
x$setinverse(inv)
inv
}
u <- makeCacheMatrix(t)
u
u$get
t
u <- makeCacheMatrix(t)
u$get()
cacheSolve(u)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinvinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this functt = ion
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
#     if( !is.null(inv)) {
#                 message("getting cached inverse")
#                 return(inv)
#     }
#     mat <- x$get()
#     inv <- solve(mat,...)
#     x$setinverse(inv)
inv
}
cacheSolve(u)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
#     inv <- solve(mat,...)
#     x$setinverse(inv)
inv
}
cacheSolve(u)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
#     x$setinverse(inv)
inv
}
cacheSolve(u)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
cacheSolve(u)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this functt = ion
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
cacheSolve(u)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this functt = ion
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
t
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this functt = ion
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
u <- setCacheMatrix(t)
u <- makeCacheMatrix(t)
cacheSolve(u)
cacheSolve(u)
cacheSolve(t)
u$get()
u$getinverse()
v <- makeCacheMatrix(1:4)
cacheSolve(v)
v <- makeCacheMatrix(1:4,nrow = 2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this functt = ion
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
m <- matrix(1:16,nrow = 4)
u <- makeCacheMatrix(m)
u$get()
cacheSolve(u)
setwd("C:/Users/Andrea/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
getwd()
ls()
rm ("u")
rm "m"
rm ("m"
rm ("m")
rm ("m")
rm ("v")
m <- matrix(c(4,2,7,6)
m <- matrix(c(4,2,7,6))
m
m <- matrix(c(4,2,7,6),nrow = 2)
makeCacheMatrix(m(
makeCacheMatrix()
m
makeCacheMatrix()
u <- makeCacheMatrix(m)
u$get()
cacheSolve(u)
cacheSolve(u)
v = c(1:4)
v
u$set(v)
cacheSolve(v)
class(m)
nrow(m)
ncol(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
if (class(y) != "matrix") {
message("Not a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
u
m
u$get()
u$getinverse()
ls()
rm (list = ls())
ls()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
if (class(y) != "matrix") {
message("Not a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Return a matrix that is the inverse of 'x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
m <- matrix(c(4,2,7,6),nrow = 2)
m
u <- setCacheMatrix(m)
u <- makeCacheMatrix(m)
u
u$get
u$get()
u$getinverse()
u$setinverse()
cacheSolve(u)
cacheSolve(u)
u$setinverse(1:4)
u$getinverse()
u <- makeCacheMatrix(m)
u$get()
cacheSolve(u)
cacheSolve(u)
u$set(1:4)
u$get()
u$getinverse()
cacheSolve(1:4,nrow=2)
cacheSolve(mat)
m
cacheSolve(m)
cacheSolve(m,nrow=2)
cacheSolve(m.asMatrix(nrow=2))
cacheSolve(m.asmatrix())
m
class(m)
class(u)
cacheSolve(u)
u
## Two functions are included here.  The first makeCacheMatrix
## should be called on a square matrix.  The second cacheSolve uses the
## return of makeCacheMatrix to form an inverse if none exists or
## returns the cached inverse if it is present.
## makeCacheMatrix provides four functions
## get to retrieve the value of the matrix, set to insert a new matrix,
## getinverse and setinverse to retrieve and insert the values of
## the inverse respectively.  The value for the inverse is cached in
## the variable inv.
## Usage : m<- matrix(c(4,2,7,6), nrow = 2)
##           u <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
if (class(y) != "matrix") {
message("Not a matrix")
return()
}
#        x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve uses the output of makeCacheMatrix.  It retrieves
## the inverse if one exists or calls the function solve to create
## one and then sets it into the instatiation of makeCacheMatrix.
## An error is returned if the matrix is singular.
##  usage cacheSolve(u) where u is the output of makeCacheMatrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
n <- makeCacheMatrix(m)
n$get()
n$set(matrix(c(2,2,2,2),nrow = 2)
n$set(matrix(c(2,2,2,2),nrow = 2))
n$get()
## Two functions are included here.  The first makeCacheMatrix
## should be called on a square matrix.  The second cacheSolve uses the
## return of makeCacheMatrix to form an inverse if none exists or
## returns the cached inverse if it is present.
## makeCacheMatrix provides four functions
## get to retrieve the value of the matrix, set to insert a new matrix,
## getinverse and setinverse to retrieve and insert the values of
## the inverse respectively.  The value for the inverse is cached in
## the variable inv.
## Usage : m<- matrix(c(4,2,7,6), nrow = 2)
##           u <- makeCacheMatrix()
#makeCacheMatrix <- function(x = matrix()) {
makeCacheMatrix <- function (x)
inv <- NULL
set <- function(y) {
if (class(y) != "matrix") {
message("Not a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve uses the output of makeCacheMatrix.  It retrieves
## the inverse if one exists or calls the function solve to create
## one and then sets it into the instatiation of makeCacheMatrix.
## An error is returned if the matrix is singular.
##  usage cacheSolve(u) where u is the output of makeCacheMatrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
k <- makeCacheMatrix(m)
k$get()
## Two functions are included here.  The first makeCacheMatrix
## should be called on a square matrix.  The second cacheSolve uses the
## return of makeCacheMatrix to form an inverse if none exists or
## returns the cached inverse if it is present.
## makeCacheMatrix provides four functions
## get to retrieve the value of the matrix, set to insert a new matrix,
## getinverse and setinverse to retrieve and insert the values of
## the inverse respectively.  The value for the inverse is cached in
## the variable inv.
## Usage : m<- matrix(c(4,2,7,6), nrow = 2)
##           u <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
if (class(y) != "matrix") {
message("Not a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve uses the output of makeCacheMatrix.  It retrieves
## the inverse if one exists or calls the function solve to create
## one and then sets it into the instatiation of makeCacheMatrix.
## An error is returned if the matrix is singular.
##  usage cacheSolve(u) where u is the output of makeCacheMatrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of x
inv <- x$getinverse()
if( !is.null(inv)) {
message("getting cached inverse")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setinverse(inv)
inv
}
k <- makeCacheMatrix(m)
k$get()
q()
